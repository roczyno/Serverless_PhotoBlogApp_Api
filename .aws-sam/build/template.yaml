AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'PhotoBlogApp

  Sample SAM Template for PhotoBlogApp

  '
Globals:
  Function:
    Timeout: 20
    Runtime: java17
    Architectures:
    - x86_64
    MemorySize: 512
    Environment:
      Variables:
        PB_COGNITO_POOL_CLIENT_ID:
          Ref: PhotoBlogAppUserPoolClient
        PB_COGNITO_POOL_SECRET_ID:
          Fn::GetAtt:
          - PhotoBlogAppUserPoolClient
          - ClientSecret
        PB_COGNITO_USER_POOL_ID:
          Ref: PhotoBlogAppUserPool
        PB_LOGIN_TOPIC:
          Ref: LoginNotificationTopic
Resources:
  PhotoBlogAppUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: PhotoBlogUserPool
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: Hello {username}, your verification code is {####}. Please
            use this code to verify your email and complete your registration.
          EmailSubject: Verify your email for PhotoBlogApp
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: userId
        AttributeDataType: String
        Mutable: true
        Required: false
      UsernameAttributes:
      - email
      UsernameConfiguration:
        CaseSensitive: false
  PhotoBlogAppUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: PhotoBlogAppUserPool
      ClientName: PhotoBlogAppClient
      GenerateSecret: true
      ExplicitAuthFlows:
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlows:
      - code
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
      - http://localhost:5173
      SupportedIdentityProviders:
      - COGNITO
  PhotoBlogAppUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Fn::Sub: photoblogapp-${AWS::AccountId}
      UserPoolId:
        Ref: PhotoBlogAppUserPool
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - PhotoBlogAppUserPool
              - Arn
        AddDefaultAuthorizerToCorsPreflight: false
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With'''
        AllowOrigin: '''*'''
        MaxAge: '''3600'''
  LoginUserHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LoginUserHandlerFunction
      Handler: com.roczyno.aws.photoblogapp.auth.LoginUserHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - sns:Publish
          Resource:
            Ref: LoginNotificationTopic
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub: arn:aws:logs:eu-west-1:${AWS::AccountId}:log-group:/aws/lambda/*
      Events:
        LoginUser:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: MyApi
            Auth:
              Authorizer: NONE
    Metadata:
      SamResourceId: LoginUserHandlerFunction
  RegisterUserHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: RegisterUserHandlerFunction
      Handler: com.roczyno.aws.photoblogapp.auth.RegisterUserHandler::handleRequest
      Policies:
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - cognito-idp:SignUp
          - cognito-idp:ConfirmSignUp
          - cognito-idp:AdminCreateUser
          Resource:
            Fn::GetAtt:
            - PhotoBlogAppUserPool
            - Arn
        - Effect: Allow
          Action:
          - sns:Subscribe
          Resource:
            Ref: LoginNotificationTopic
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub: arn:aws:logs:eu-west-1:${AWS::AccountId}:log-group:/aws/lambda/*
      Events:
        LoginUser:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId:
              Ref: MyApi
            Auth:
              Authorizer: NONE
    Metadata:
      SamResourceId: RegisterUserHandlerFunction
  ConfirmUserHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ConfirmUserHandlerFunction
      Handler: com.roczyno.aws.photoblogapp.auth.ConfirmUserHandler::handleRequest
      Events:
        LoginUser:
          Type: Api
          Properties:
            Path: /confirm
            Method: post
            RestApiId:
              Ref: MyApi
            Auth:
              Authorizer: NONE
    Metadata:
      SamResourceId: ConfirmUserHandlerFunction
  LoginNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: LoginNotificationTopic
      DisplayName: LoginNotificationTopic
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
      SqsManagedSseEnabled: true
  ImageUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ImageUploadFunction
      Handler: com.roczyno.aws.photoblogapp.image.ImageUploadHandler::handleRequest
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: StagingBucket
      - SQSSendMessagePolicy:
          QueueName:
            Fn::GetAtt:
            - ProcessingQueue
            - QueueName
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
      Environment:
        Variables:
          STAGING_BUCKET:
            Ref: StagingBucket
          PROCESSING_QUEUE:
            Ref: ProcessingQueue
      Events:
        UploadApi:
          Type: Api
          Properties:
            Path: /image/upload
            Method: post
            RestApiId:
              Ref: MyApi
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: ImageUploadFunction
  ImageProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ImageProcessorFunction
      Handler: com.roczyno.aws.photoblogapp.image.ImageProcessorHandler::handleRequest
      Policies:
      - S3CrudPolicy:
          BucketName:
            Ref: StagingBucket
      - S3CrudPolicy:
          BucketName:
            Ref: PrimaryBucket
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ImagesTable
      - SQSPollerPolicy:
          QueueName:
            Fn::GetAtt:
            - ProcessingQueue
            - QueueName
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
      Environment:
        Variables:
          PB_PRIMARY_BUCKET:
            Ref: PrimaryBucket
          PB_IMAGES_TABLE:
            Ref: ImagesTable
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - ProcessingQueue
              - Arn
            BatchSize: 1
    Metadata:
      SamResourceId: ImageProcessorFunction
  ShareImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ShareImageFunction
      Handler: com.roczyno.aws.photoblogapp.image.ShareImageHandler::handleRequest
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ImagesTable
      - S3ReadPolicy:
          BucketName:
            Ref: PrimaryBucket
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
      Environment:
        Variables:
          PRIMARY_BUCKET:
            Ref: PrimaryBucket
          IMAGES_TABLE:
            Ref: ImagesTable
      Events:
        ShareImage:
          Type: Api
          Properties:
            Path: /image/{imageId}/share
            Method: get
            RestApiId:
              Ref: MyApi
            Auth:
              Authorizer: CognitoAuthorizer
    Metadata:
      SamResourceId: ShareImageFunction
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photoblogapp-staging-bucket
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          - PUT
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
          MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: ObjectWriter
      LifecycleConfiguration:
        Rules:
        - Id: DeleteOldFiles
          Status: Enabled
          ExpirationInDays: 7
  StagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StagingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${StagingBucket}/*
  PrimaryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photoblogapp-primary-bucket
      CorsConfiguration:
        CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - GET
          AllowedOrigins:
          - '*'
          MaxAge: 3000
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls:
        Rules:
        - ObjectOwnership: ObjectWriter
  PrimaryBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: PrimaryBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${PrimaryBucket}/*
  ImagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: photoblogapp-images
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: imageId
        AttributeType: S
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: imageId
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: UserImagesIndex
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
Outputs:
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value:
      Ref: PhotoBlogAppUserPool
  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value:
      Ref: PhotoBlogAppUserPoolClient
  UserPoolClientSecret:
    Description: Secret of the Cognito User Pool Client
    Value:
      Fn::GetAtt:
      - PhotoBlogAppUserPoolClient
      - ClientSecret
  ApiEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
  CognitoLoginUrl:
    Description: Cognito hosted UI login URL
    Value:
      Fn::Sub: https://${PhotoBlogAppUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${PhotoBlogAppUserPoolClient}&response_type=code&scope=email+openid+profile&redirect_uri=http://localhost:5173
  CognitoDomain:
    Description: Cognito User Pool Domain
    Value:
      Fn::Sub: https://${PhotoBlogAppUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
  PrimaryBucketName:
    Description: Name of the primary S3 bucket
    Value:
      Ref: PrimaryBucket
  ImagesTableName:
    Description: Name of the DynamoDB images table
    Value:
      Ref: ImagesTable
